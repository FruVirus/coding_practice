23 Minimum Spanning Trees
=========================

Minimum spanning trees (MST) are useful for when we want to find an acyclic subset of
edges, T, that connect certain vertices and we wish to minimize the total weight of
those edges. Since T is acyclic and connects all of the desired vertices, it must form
a tree, which we call a spanning tree since it "spans" the graph G. We call the problem
of determining the tree T the minimum-spanning-tree problem.

For a graph G = (V, E), its MST always contains |V| vertices and exactly |V| - 1 edges.
In addition, a MST must be acyclic.

Two main algorithms for solving the MST problem are Kruskal's algorithm and Prim's
algorithm. We can easily make each of them run in time O(E * lg(V)) using ordinary
binary heaps.

The two algorithms are greedy algorithms. Each step of a greedy algorithm must make one
of several possible choices. The greedy strategy advocates making the choice that is the
best at the moment. Such a strategy does not generally guarantee that it will always
find globally optimal solutions to problems. For the MST problem, however, we can prove
that certain greedy strategies do yield a spanning tree with minimum weight.

The minimum weight associated with a minimum-spanning tree is unique. However, the MST
that provides the minimum weight is NOT unique. There can be multiple MSTs with the same
minimum weight.

23.1 Growing a minimum spanning tree
====================================

A generic method for growing a MST grows the MST one edge at a time using a greedy
strategy. The generic method manages a set of edges A, maintaining the following loop
invariant: Prior to each iteration, A is a subset of some minimum spanning tree.

At each step, we determine an edge (u, v) that we can add to A without violating this
invariant, in the sense that A and (u, v) is also a subset of a minimum spanning tree.
We call such an edge a safe edge for A, since we can add it safely to A while
maintaining the invariant.

Generic-MST(G, w)

A = Null
while A does not form a spanning tree
    find an edge (u, v) that is safe for A
    A = A and (u, v)
return A

As the method proceeds, the set A is always acyclic; otherwise, a MST including A would
contain a cycle, which is a contradiction.

The while-loop executes |V| - 1 times because it finds one of the |V| - 1 edges of a MST
in each iteration. Initially, when A = Null, there are |V| trees in the graph, and each
iteration reduces that number by 1. When the forest contains only a single tree, the
method terminates.
