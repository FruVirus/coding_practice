16 Greedy Algorithms
====================

Like dynamic-programming algorithms, greedy algorithms typically apply to optimization
problems in which we make a set of choices in order to arrive at an optimal solution.
The idea of a greedy algorithm is to make each choice in a locally optimal manner. A
greedy approach provides an optimal solution for many problems much more quickly than
would a dynamic-programming approach. We cannot always easily tell whether a greedy
approach will be effective, however. In particular, greedy algorithms do not always
yield globally-optimal solutions.

Algorithms for optimization problems typically go through a sequence of steps, with a
set of choices at each step. For many optimization problems, using dynamic programming
to determine the best choices is overkill; simpler, more efficient algorithms will do. A
greedy algorithm always makes the choice that looks best at the moment. That is, it
makes a locally optimal choice in the hope that this choice will lead to a globally
optimal solution.

Greedy algorithms do not always yield optimal solutions, but for many problems they do.


16.2 Elements of the greedy strategy
====================================

A greedy algorithm obtains an optimal solution to a problem by making a sequence of
choices. At each decision point, the algorithm makes the choice that seems best at the
moment. This heuristic strategy does not always produce an optimal solution, but
sometimes it does.

More generally, we design greedy algorithms according to the following sequence of
steps:

1. Cast the optimization problem as one in which we make a choice and are left with one
subproblem to solve.

2. Prove that there is always an optimal solution to the original problem that makes the
greedy choice, so that the greedy choice is always safe.

3. Demonstrate optimal substructure by showing that, having made the greedy choice, what
remains is a subproblem with the property that if we combine an optimal solution to the
subproblem with the greedy choice we have made, we arrive at an optimal solution to the
original problem.

How can we tell whether a greedy algorithm will solve a particular optimization problem?
No way works all the time, but the greedy-choice property and optimal substructure are
the two key ingredients. If we can demonstrate that the problem has these properties,
then we are well on the way to developing a greedy algorithm for it.

Greedy-choice property
----------------------

The first key ingredient is the greedy-choice property: we can assemble a globally
optimal solution by making locally optimal (greedy) choices. In other words, when we are
considering which choice to make, we make the choice that looks best in the current
problem, without considering results from subproblems.

Here is where greedy algorithms differ from dynamic programming. In dynamic programming,
we make a choice at each step, but the choice usually depends on the solutions to
subproblems. Consequently, we typically solve dynamic-programming problems in a
bottom-up manner, progressing from smaller subproblems to larger subproblems before
making a choice. In a greedy algorithm, we make whatever choice seems best at the moment
and then solve the subproblem that remains. The choice made by a greedy algorithm may
depend on choices so far, but it cannot depend on any future choices or on the solutions
to subproblems. Thus, unlike dynamic programming, which solves the subproblems before
making the first choice, a greedy algorithm makes its first choice before solving any
subproblems. A dynamic-programming algorithm proceeds bottom-up, whereas a greedy
strategy usually progresses in a top-down fashion, making one greedy choice after
another, reducing each given problem instance to a smaller one.

Optimal substructure
--------------------

A problem exhibits optimal substructure if an optimal solution to the problem contains
within it optimal solutions to subproblems. This property is a key ingredient in
assessing the applicability of dynamic programming as well as greedy algorithms.

We usually use a more direct approach regarding optimal substructure when applying it to
greedy algorithms. We have the luxury of assuming that we arrived at a subproblem by
having made the greedy choice in the original problem. All we really need to do is argue
that an optimal solution to the subproblem, combined with the greedy choice already
made, yields an optimal solution to the original problem.