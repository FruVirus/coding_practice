25 All-Pairs Shortest Paths
===========================

We consider the problem of finding shortest paths between all pairs of vertices in a
graph. We are given a weighted, directed graph G = (V, E) with a weight function
w: E -> R that maps edges to real-valued weights. We wish to find, for every pair of
vertices u, v in V, a shortest (least-weight) path from u to v, where the weight of a
path is the sum of the weights of its constituent edges. We typically want the output in
tabular form: the entry in u's row and v's column should be the weight of a shortest
path from u to v.

We can solve an all-pairs shortest-paths problem by running a single-source
shortest-paths algorithm |V| times, once for each vertex as the source. If all edge
weights are non-negative, we can use Dijkstra's algorithm.

If the graph has negative-weight edges, we cannot use Dijkstra's algorithm. Instead, we
must run the slower Bellman-Ford algorithm once from each vertex. The resulting running
time is O(V^2 * E), which on a dense graph is O(V^4).

Unlike the single-source algorithms, which assume an adjacency list representation of
the graph, most of the algorithms in this chapter use an adjacency-matrix
representation. For convenience, we assume that the vertices are numbered
1, 2, ..., |V|, so that the input is an n x n matrix W representing the edge weights of
an n-vertex directed graph G = (V, E). That is, W = (w_ij), where

w_ij =  0                                   if i = j,,
        the weight of directed edge (i, j)  if i != j and (i, j) in E,
        float("inf")                        if i != j and (i, j) not in E.

We allow negative-weight edges, but we assume for the time being that the input graph
contains no negative-weight cycles.

The tabular output of the all-pairs shortest-paths algorithms presented in this chapter
is an n x n matrix D = (d_ij), where entry d_ij contains the weight of a shortest path
from vertex i to vertex j. That is, if we let delta(i, j) denote the shortest-path
weight from vertex i to vertex j, then d_ij = delta(i, j) at termination.

To solve the all-pairs shortest-paths problem on an input adjacency matrix, we need to
compute not only the shortest-path weights but also a predecessor matrix pi = (pi_ij),
where pi_ij is NIL if either i = h or there is no path from i to j, and otherwise
pi_ij is the predecessor of j on some shortest path from i. Just as the predecessor
subgraph G_pi is a shortest-paths tree for a given source vertex, the subgraph induced
by the i-th row of the pi matrix should be a shortest-paths tree with root i.